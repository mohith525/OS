#include <stdio.h>

int main() {
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0;
    int at[10], bt[10], temp[10]; // Arrival Time, Burst Time, Temporary Array
    float avg_wt, avg_tat;

    // Input the number of processes
    printf("Total number of processes in the system: ");
    scanf("%d", &NOP);

    y = NOP; // Remaining processes

    // Input Arrival Time and Burst Time for each process
    for (i = 0; i < NOP; i++) {
        printf("\nEnter Arrival Time and Burst Time for Process[%d]:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &at[i]);
        printf("Burst Time: ");
        scanf("%d", &bt[i]);
        temp[i] = bt[i]; // Store burst time in temp array
    }

    // Input Time Quantum
    printf("Enter the Time Quantum for the processes: ");
    scanf("%d", &quant);

    printf("\nProcess No\tBurst Time\tTurnaround Time\tWaiting Time\n");

    // Round Robin Scheduling Logic
    for (sum = 0, i = 0; y != 0; ) {
        if (temp[i] <= quant && temp[i] > 0) {
            sum += temp[i];    // Add remaining burst time to total time
            temp[i] = 0;       // Process completed
            count = 1;         // Mark process as completed
        } else if (temp[i] > 0) {
            temp[i] -= quant;  // Deduct quantum from burst time
            sum += quant;      // Add quantum to total time
        }

        // If process is completed
        if (temp[i] == 0 && count == 1) {
            y--; // Decrement remaining processes
            printf("Process[%d]\t%d\t\t%d\t\t\t%d\n", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);
            wt += sum - at[i] - bt[i]; // Calculate Waiting Time
            tat += sum - at[i];        // Calculate Turnaround Time
            count = 0;                 // Reset count
        }

        // Move to next process or reset to first process
        if (i == NOP - 1) {
            i = 0;
        } else if (at[i + 1] <= sum) {
            i++;
        } else {
            i = 0;
        }
    }

    // Calculate and display average times
    avg_wt = (float) wt / NOP;
    avg_tat = (float) tat / NOP;
    printf("\nAverage Turnaround Time: %.2f", avg_tat);
    printf("\nAverage Waiting Time: %.2f\n", avg_wt);

    return 0;
}
